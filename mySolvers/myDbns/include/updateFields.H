{
    // Compute U
    U = rhoU/rho;

    // Compute internal energy
    const volScalarField e = rhoE/rho - 0.5*magSqr(U);

    autoPtr<gasProperties> gasProps(gasProperties::New(thermo));
    
    forAll(h, cell)
    {
        p[cell] = gasProps->pEs(e[cell], rho[cell], p[cell]);
        h[cell] = e[cell] + p[cell]/rho[cell];
    }    

    // Estimate the density at the boundary using "zeroGradient"
    //rho.boundaryFieldRef() = thermo.rho()().boundaryField();
    rho.correctBoundaryConditions();

    // Correct boundary conditions
    U.correctBoundaryConditions();
    MRF.correctBoundaryVelocity(U);    
    p.correctBoundaryConditions();
    h.correctBoundaryConditions();

    boundMinMax(p, pMin, pMax);
    fvOptions.correct(h);

    // Correct thermodynamics
    thermo.correct();

    // Update boundary field of rho
    //rho.boundaryFieldRef() = thermo.rho()().boundaryField();
    rho.boundaryFieldRef() = thermo.psi().boundaryField() * p.boundaryField();

    // Bound density
    boundMinMax(rho, rhoMin, rhoMax);

    // Update boundary field of rhoU 
    rhoU.boundaryFieldRef() = rho.boundaryField()*U.boundaryField();

    // Update boundary field of rhoE
    rhoE.boundaryFieldRef() =
      rho.boundaryField()*( h.boundaryField() + 0.5*magSqr(U.boundaryField()) )
        - p.boundaryField();
    
}
